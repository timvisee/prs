image: "rust:slim"

stages:
  - check
  - build
  - test
  - package
  - pre-release
  - release

# Variable defaults
variables:
  RUST_VERSION: stable
  TARGET: x86_64-unknown-linux-gnu
  APT_GTK_LIBS: libgtk-3-dev
  FEATURES_CLI_UNIX: backend-gpgme,alias,clipboard,notify,select-skim,tomb,totp
  FEATURES_GTK3_UNIX: backend-gpgme
  FEATURES_CLI_WINDOWS: backend-gnupg-bin,clipboard,notify,select-fzf-bin,totp

# Install compiler and OpenSSL dependencies
before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends libgpgme-dev build-essential pkg-config xorg-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev python3 libx11-xcb-dev libdbus-1-dev libgl1-mesa-dev $APT_GTK_LIBS $APT_PACKAGES
  - apt-get install -y $APT_PACKAGES_RECOMMENDS
  - |
    rustup install $RUST_VERSION
    rustup default $RUST_VERSION
  - |
    rustc --version
    cargo --version

# Windows before script
.before_script-windows: &before_script-windows
  before_script:
    # Install scoop
    - iex "& {$(irm get.scoop.sh)} -RunAsAdmin"

    # Install Rust
    - scoop install rustup
    - rustup install $RUST_VERSION
    - rustup default $RUST_VERSION
    - rustc --version
    - cargo --version

    # Install missing Rust target
    - rustup target add x86_64-pc-windows-msvc

    # Install GPGME
    - scoop install gpg

# Check on stable, beta and nightly 
.check-base: &check-base
  stage: check
  script:
    - cargo check --verbose
    - cd cli; cargo check --no-default-features --features $FEATURES_CLI_UNIX --locked --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features $FEATURES_GTK3_UNIX --locked --verbose; cd ..
    - cd lib; cargo check --no-default-features --features backend-gpgme --locked --verbose; cd ..
    - cd lib; cargo check --no-default-features --features backend-gnupg-bin --locked --verbose; cd ..
    - cd cli; cargo check --no-default-features --features backend-gpgme --locked --verbose; cd ..
    - cd cli; cargo check --no-default-features --features backend-gnupg-bin --locked --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features backend-gpgme --locked --verbose; cd ..
    - cd gtk3; cargo check --no-default-features --features backend-gnupg-bin --locked --verbose; cd ..
# check-stable:
#   <<: *check-base
check-beta:
  <<: *check-base
  variables:
    RUST_VERSION: beta
  only:
    - master
check-nightly:
  <<: *check-base
  variables:
    RUST_VERSION: nightly
  only:
    - master
check-msrv:
  <<: *check-base
  variables:
    RUST_VERSION: "1.71.1"
  only:
    - master

# Build using Rust stable on Linux
build-x86_64-linux-gnu:
  stage: build
  needs: []
  script:
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_UNIX --locked --verbose; cd ..
    - cd gtk3; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_GTK3_UNIX --locked --verbose; cd ..
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-gnu
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build a static version
build-x86_64-linux-musl:
  image: alpine
  stage: build
  needs: []
  variables:
    TARGET: x86_64-unknown-linux-musl
    FEATURES_CLI_UNIX: backend-gnupg-bin,alias,clipboard,notify,select-skim,tomb,totp
    FEATURES_GTK3_UNIX: backend-gnupg-bin
  before_script: []
  script:
    - apk add rustup alpine-sdk libxcb-dev gtk+3.0-dev

    - rustup-init -y --target=$TARGET
    - source $HOME/.cargo/env

    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_UNIX --locked --verbose; cd ..
    - cd gtk3; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_GTK3_UNIX --locked --verbose; cd ..

    # Prepare the release artifact, strip it
    - find . -name prs -exec ls -lah {} \;
    - mv target/$TARGET/release/prs ./prs-$TARGET
    - mv target/$TARGET/release/prs-gtk3-copy ./prs-gtk3-copy-$TARGET
    - strip -g ./prs-$TARGET
    - strip -g ./prs-gtk3-copy-$TARGET
  artifacts:
    name: prs-x86_64-linux-musl
    paths:
      - prs-$TARGET
      - prs-gtk3-copy-$TARGET
    expire_in: 1 month

# Build using Rust stable on Windows
build-x86_64-windows:
  stage: build
  tags:
    - windows
  only:
    - master
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  needs: []
  variables:
    TARGET: x86_64-pc-windows-msvc
  <<: *before_script-windows
  script:
    - cd cli; cargo build --target=$TARGET --release --no-default-features --features $FEATURES_CLI_WINDOWS --locked --verbose; cd ..
    - mv target\$env:TARGET\release\prs.exe .\prs-$env:TARGET.exe
  artifacts:
    name: prs-x86_64-windows
    paths:
      - prs-$TARGET.exe
    expire_in: 1 month

# Run the unit tests through Cargo on Linux
test-cargo-x86_64-linux-gnu:
  stage: test
  needs: []
  dependencies: []
  script:
    - cargo test --locked --verbose

# Run the unit tests through Cargo on Windows
test-cargo-x86_64-windows:
  stage: test
  tags:
    - windows
  only:
    - master
  needs: []
  dependencies: []
  cache: {}
  <<: *before_script-windows
  script:
    - cd lib; cargo test --locked --verbose; cd ..
    - cd cli; cargo test --locked --verbose; cd ..

# Run basic integration test with prs
test-integration:
  image: alpine
  stage: test
  needs:
    - build-x86_64-linux-musl
  dependencies:
    - build-x86_64-linux-musl
  variables:
    TARGET: x86_64-unknown-linux-musl
  before_script: []
  script:
    - apk add git gnupg gpgme
    - mv ./prs-$TARGET ./prs

    - git config --global user.email example@example.org
    - git config --global user.name "Example User"

    # TODO: add/edit/remove secrets
    - ./prs help
    - ./prs init
    - ./prs sync init
    - ./prs list
    - ./prs sync

# Package a Docker image
package-docker:
  image: docker:latest
  stage: package
  tags:
    - linux
    - docker
  needs:
    - build-x86_64-linux-musl
  dependencies:
    - build-x86_64-linux-musl
  services:
    - docker:dind
  only:
    - master
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  variables:
    TARGET: x86_64-unknown-linux-musl
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    DOCKER_HOST: tcp://docker:2375
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    - ls -al

    # Place binary in Docker directory
    - mv ./prs-$TARGET ./pkg/docker/prs

    # Build the Docker image, run it once to test
    - cd ./pkg/docker
    - docker build -t $IMAGE_NAME ./
    - docker run --rm $IMAGE_NAME -V
    - cd ../..

    # Export image as artifact
    - docker image save -o ./prs-docker-$TARGET.tar $IMAGE_NAME
  artifacts:
    name: prs-docker-x86_64-linux-musl
    paths:
      - prs-docker-$TARGET.tar
    expire_in: 1 month

# Release binaries on GitLab as generic package
release-gitlab-generic-package:
  image: curlimages/curl
  stage: pre-release
  dependencies:
    - build-x86_64-linux-gnu
    - build-x86_64-linux-musl
    - build-x86_64-windows
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    WINDOWS_BIN: "prs-x86_64-pc-windows-msvc.exe"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish packages
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_GNU_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_MUSL_BIN_GTK_COPY} ${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${WINDOWS_BIN} ${PACKAGE_REGISTRY_URL}/${WINDOWS_BIN}

# Publish GitLab release
release-gitlab-release:
  image: registry.gitlab.com/gitlab-org/release-cli
  stage: release
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  variables:
    LINUX_GNU_BIN: "prs-x86_64-unknown-linux-gnu"
    LINUX_GNU_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-gnu"
    LINUX_MUSL_BIN: "prs-x86_64-unknown-linux-musl"
    LINUX_MUSL_BIN_GTK_COPY: "prs-gtk3-copy-x86_64-unknown-linux-musl"
    WINDOWS_BIN: "prs-x86_64-pc-windows-msvc.exe"
  before_script: []
  script:
    # Get version based on tag, determine registry URL
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/prs/${VERSION}"

    # Publish release
    - |
      release-cli create --name "prs $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_GNU_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_GNU_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN}\"}" \
        --assets-link "{\"name\":\"${LINUX_MUSL_BIN_GTK_COPY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_MUSL_BIN_GTK_COPY}\"}" \
        --assets-link "{\"name\":\"${WINDOWS_BIN}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${WINDOWS_BIN}\"}"

# Publish GitHub release
release-github:
  stage: release
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  dependencies:
    - build-x86_64-linux-gnu
    - build-x86_64-linux-musl
    - build-x86_64-windows
  before_script: []
  script:
    # Install dependencies
    - apt-get update
    - apt-get install -y curl wget gzip netbase

    # Download github-release binary
    - wget https://github.com/tfausak/github-release/releases/download/1.2.5/github-release-linux.gz -O github-release.gz
    - gunzip github-release.gz
    - chmod a+x ./github-release

    # Create the release, upload binaries
    - ./github-release release --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --title "prs $CI_COMMIT_REF_NAME"
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-unknown-linux-gnu --name prs-$CI_COMMIT_REF_NAME-linux-x64
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-gtk3-copy-x86_64-unknown-linux-gnu --name prs-gtk3-copy-$CI_COMMIT_REF_NAME-linux-x64
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-unknown-linux-musl --name prs-$CI_COMMIT_REF_NAME-linux-x64-static
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-gtk3-copy-x86_64-unknown-linux-musl --name prs-gtk3-copy-$CI_COMMIT_REF_NAME-linux-x64-static
    - ./github-release upload --token "$GITHUB_TOKEN" --owner timvisee --repo prs --tag "$CI_COMMIT_REF_NAME" --file ./prs-x86_64-pc-windows-msvc.exe --name prs-$CI_COMMIT_REF_NAME-windows.exe

# Cargo crate release
release-crate:
  stage: release
  dependencies: []
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  before_script: []
  script:
    - echo "Creating release crate to publish on crates.io..."
    - echo $CARGO_TOKEN | cargo login
    - echo "Publishing crates to crates.io..."
    - cd lib; cargo publish --allow-dirty --no-verify --locked --verbose ; cd ..

    # Give package index some time to sync
    - sleep 60

    - cd cli; cargo publish --allow-dirty --no-verify --locked --verbose; cd ..
    - cd gtk3; cargo publish --allow-dirty --no-verify --locked --verbose; cd ..

# Publish Docker image on repository registry
release-docker:
  image: docker:latest
  stage: release
  tags:
    - linux
    - docker
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  dependencies:
    - package-docker
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    # Import Docker image
    - docker image load -i ./prs-docker-$TARGET.tar

    # Retag version
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - echo "Determined Docker image version number 'v$VERSION', retagging image..."
    - docker tag $IMAGE_NAME registry.gitlab.com/timvisee/prs:$VERSION
    - docker tag $IMAGE_NAME registry.gitlab.com/timvisee/prs:latest

    # Authenticate and push the Docker images
    - 'docker login registry.gitlab.com -u $DOCKER_USER -p $DOCKER_PASS'
    - docker push registry.gitlab.com/timvisee/prs:$VERSION
    - docker push registry.gitlab.com/timvisee/prs:latest

# Publish Docker image on Docker hub
release-docker-hub:
  image: docker:latest
  stage: release
  tags:
    - linux
    - docker
  only:
    - /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  dependencies:
    - package-docker
  services:
    - docker:dind
  variables:
    TARGET: x86_64-unknown-linux-musl
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: prs:$CI_COMMIT_SHA
    # DOCKER_DRIVER: overlay2
  before_script: []
  script:
    # Import Docker image
    - docker image load -i ./prs-docker-$TARGET.tar

    # Retag version
    - VERSION=$(echo $CI_COMMIT_REF_NAME | cut -c 2-)
    - echo "Determined Docker image version number 'v$VERSION', retagging image..."
    - docker tag $IMAGE_NAME timvisee/prs:$VERSION
    - docker tag $IMAGE_NAME timvisee/prs:latest

    # Authenticate and push the Docker images
    - echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin
    - docker push timvisee/prs:$VERSION
    - docker push timvisee/prs:latest

# AUR packages release
release-aur:
  image: archlinux
  stage: release
  only:
    - /^v(\d+\.)*\d+$/
  timeout: 1h 30m
  before_script: []
  script:
    - cd ./pkg/aur
    - ./publish
